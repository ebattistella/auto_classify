### Author: Enzo Battistella
### Date: 3/15/2022
####################################
### Keywords: Heaviest k-subgraph; Interface;
### Description: <Python interface for the C++ implementation of the heaviest k-subgraph>
### Input: graph, path where to save the files, k
### Ouput: heaviest k-subgraph
###################################

import numpy as np
import os, sys
import subprocess

# Call the compiled C++ code, see the readme for compilation details
def launch_hks(filename, k, output_name):
    startupinfo = None
    if sys.platform.startswith("win"):
        # this startupinfo structure prevents a console window from popping up on Windows
        startupinfo = subprocess.STARTUPINFO()
        startupinfo.dwFlags |= subprocess.STARTF_USESHOWWINDOW
    command = ' '.join(['./hks/bb_dks', str(k), filename + '.txt', output_name + '.txt'])
    completed_process = subprocess.run(command, shell=True, capture_output=True, startupinfo=startupinfo)
    print('Return code : ')
    print(completed_process.returncode)
    return completed_process

# Write the graph in an input file for the C++ code
def write_file(graph, filename):
    quantile = np.quantile(graph, 0.5)
    graph = np.array([i if np.max(i)>quantile else np.zeros(len(i)) for i in graph])
    with open(filename + ".txt", "w") as f:
        for i in range(len(graph)):
            for j in range(i):
                if graph[i][j] > 0:
                    f.write(str(i) + ' ' + str(j) + ' ' + str(graph[i][j]) + '\n')


# Read the output generated by the C++ code
def read_result(output_name):
    try:
        with open(output_name + ".txt", 'r') as f:
            lines = f.readlines()
            density = float(lines[0].split(': ')[-1])
            size = int(lines[1].split(': ')[-1])
            if size > 0:
                nodes_str = lines[2].split(': ')[-1]
                nodes = [int(idx) for idx in nodes_str.split(' ')]
            else:
                nodes = []
            return density, size, nodes
    except:
        return 0, 0, []

# Simple test example
if __name__ == "__main__":
    iter = 100
    ncpu = 2
    G = np.array([[0, 0, 1, 0, 0, 0], [0, 0, 3, 0, 0, 0], [1, 3, 0, 1, 1, 0],
                  [0, 0, 1, 0, 2, 1], [0, 0, 1, 2, 0, 1], [0, 0, 0, 1, 1, 0]])
    directory = "./"
    filename = directory + "test"
    write_file(G, filename)
    completed_process = launch_hks(filename, iter, ncpu)
    if completed_process.returncode == 0:
        S = read_result(filename)
        print(S)
    else:
        print("Error in decomposition", str(completed_process.returncode))
